# Generated by Django 5.2.6 on 2025-09-28 14:31
from django.db import migrations
import csv
import os

def load_data(apps, schema_editor):
    # Get models from Django app
    Node = apps.get_model("app", "Node")
    Topic = apps.get_model("app", "Topic")
    Concept = apps.get_model("app", "Concept")
    Relationship = apps.get_model("app", "Relationship")
    Module = apps.get_model("app", "Module")
    Student = apps.get_model("app", "Student")
    StudentQuizHistory = apps.get_model("app", "StudentQuizHistory")

    base_dir = os.path.dirname(__file__)

    # === Load Modules ===
    modules_path = os.path.join(base_dir, "modules.csv")
    if os.path.exists(modules_path):
        with open(modules_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                Module.objects.update_or_create(
                    id=row["module_id"],
                    defaults={
                        "name": row["module_name"],
                        "index": row.get("module_index", "")
                    }
                )

    # === Load Nodes (generic) ===
    nodes_path = os.path.join(base_dir, "nodes.csv")
    with open(nodes_path, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            node_id = row["node_id"]
            name = row["node_name"]
            summary = row["node_description"]
            node_type = row["node_type"].lower()
            module_id = row.get("node_module_id")
            module = Module.objects.get(id=module_id) if module_id else None

            if node_type == "topic":
                Topic.objects.update_or_create(
                    id=node_id,
                    defaults={"name": name, "summary": summary, "module": module}
                )
            elif node_type == "concept":
                parent_id = row.get("parent_node_id")
                if parent_id:
                    parent_topic = Topic.objects.get(id=parent_id)
                    Concept.objects.update_or_create(
                        id=node_id,
                        defaults={"name": name, "summary": summary, "related_topic": parent_topic, "module": module}
                    )
                else:
                    Node.objects.update_or_create(
                        id=node_id,
                        defaults={"name": name, "summary": summary, "module": module}
                    )
            else:
                Node.objects.update_or_create(
                    id=node_id,
                    defaults={"name": name, "summary": summary, "module": module}
                )

    # === Load Relationships ===
    rels_path = os.path.join(base_dir, "relationships.csv")
    with open(rels_path, newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            rel_id = row["relationship_id"]
            first_node = Node.objects.get(id=row["node_id_1"])
            second_node = Node.objects.get(id=row["node_id_2"])
            rs_type = row["relationship_type"]
            Relationship.objects.update_or_create(
                id=rel_id,
                defaults={"first_node": first_node, "second_node": second_node, "rs_type": rs_type}
            )

    # === Load Quiz Questions ===
    quiz_path = os.path.join(base_dir, "quiz_questions.csv")
    if os.path.exists(quiz_path):
        with open(quiz_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                # Get module and topics
                module = Module.objects.get(id=row["module_id"])
                topic_ids = [int(tid.strip()) for tid in row["topic_id"].split(",")]
                topics = Topic.objects.filter(id__in=topic_ids)
                quiz_type = row.get("quiz_type", "weekly")

                # Build question dict
                question_dict = {
                    "question": row["question"],
                    "options": {
                        "A": row["option_A"],
                        "B": row["option_B"],
                        "C": row["option_C"],
                        "D": row["option_D"],
                    },
                    "answer": row["answer"],
                    "bloom_level": row["bloom_level"]
                }

                # Assign quiz to all students
                for student in Student.objects.all():
                    history = StudentQuizHistory.objects.create(
                        student=student,
                        module=module,
                        quiz_data=[question_dict],
                        student_answers={},
                        score=None,
                        completed=False,
                        quiz_type=quiz_type
                    )
                    history.topics_covered.set(topics)


def unload_data(apps, schema_editor):
    Node = apps.get_model("app", "Node")
    Relationship = apps.get_model("app", "Relationship")
    Relationship.objects.all().delete()
    Node.objects.all().delete()


class Migration(migrations.Migration):
    dependencies = [
        ("app", "0001_initial"),
    ]
    operations = [
        migrations.RunPython(load_data, reverse_code=unload_data),
    ]
