# Generated by Django 5.2.6 on 2025-09-28 14:31
from django.db import migrations
import csv
import os
from collections import defaultdict

def load_data(apps, schema_editor):
    # Get models from Django app
    Node = apps.get_model("app", "Node")
    Topic = apps.get_model("app", "Topic")
    Concept = apps.get_model("app", "Concept")
    Relationship = apps.get_model("app", "Relationship")
    Module = apps.get_model("app", "Module")
    Student = apps.get_model("app", "Student")
    StudentQuizHistory = apps.get_model("app", "StudentQuizHistory")

    base_dir = os.path.dirname(__file__)

    # === Load Modules ===
    modules_path = os.path.join(base_dir, "modules.csv")
    if os.path.exists(modules_path):
        with open(modules_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                Module.objects.update_or_create(
                    id=row["module_id"],
                    defaults={
                        "name": row["module_name"],
                        "index": row.get("module_index", "")
                    }
                )

   # === Load Nodes (robust two-pass) ===
    nodes_path = os.path.join(base_dir, "nodes.csv")
    if os.path.exists(nodes_path):
        with open(nodes_path, newline="", encoding="utf-8") as f:
            reader = list(csv.DictReader(f))  # read all rows first

        # --- Pass 1: Topics ---
        for row in reader:
            if row["node_type"].lower() == "topic":
                node_id = row["node_id"]
                name = row["node_name"]
                summary = row["node_description"]
                module_id = row["node_module_id"]
                week_no = row.get("week_no")
                week_no = week_no.strip() if week_no and week_no.strip() else None
                module = Module.objects.get(id=module_id) if module_id else None

                # update/create parent Node
                node_obj, _ = Node.objects.update_or_create(
                    id=node_id,
                    defaults={
                        "name": name,
                        "summary": summary,
                        "module": module,
                        "week_no": week_no
                    }
                )
                # ensure Topic exists
                Topic.objects.get_or_create(node_ptr=node_obj)

        # --- Pass 2: Concepts ---
        for row in reader:
            if row["node_type"].lower() == "concept":
                node_id = row["node_id"]
                name = row["node_name"]
                summary = row["node_description"]
                module_id = row["node_module_id"]
                parent_id = row.get("parent_node_id")
                week_no = row.get("week_no")
                week_no = week_no.strip() if week_no and week_no.strip() else None
                module = Module.objects.get(id=module_id) if module_id else None
                parent_topic = Topic.objects.get(id=parent_id) if parent_id else None

                # update/create parent Node
                node_obj, _ = Node.objects.update_or_create(
                    id=node_id,
                    defaults={
                        "name": name,
                        "summary": summary,
                        "module": module,
                        "week_no": week_no
                    }
                )
                # ensure Concept exists
                Concept.objects.get_or_create(node_ptr=node_obj, defaults={"related_topic": parent_topic})

        # --- Pass 3: Other Nodes ---
        for row in reader:
            if row["node_type"].lower() not in ("topic", "concept"):
                node_id = row["node_id"]
                name = row["node_name"]
                summary = row["node_description"]
                module_id = row["node_module_id"]
                week_no = row.get("week_no")
                week_no = week_no.strip() if week_no and week_no.strip() else None
                module = Module.objects.get(id=module_id) if module_id else None

                Node.objects.update_or_create(
                    id=node_id,
                    defaults={
                        "name": name,
                        "summary": summary,
                        "module": module,
                        "week_no": week_no
                    }
                )

    # === Load Relationships ===
    rels_path = os.path.join(base_dir, "relationships.csv")
    if os.path.exists(rels_path):
        with open(rels_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                rel_id = row["relationship_id"]
                first_node = Node.objects.get(id=row["node_id_1"])
                second_node = Node.objects.get(id=row["node_id_2"])
                rs_type = row["relationship_type"]

                Relationship.objects.update_or_create(
                    id=rel_id,
                    defaults={"first_node": first_node, "second_node": second_node, "rs_type": rs_type}
                )

    # === Load Students ===
    students_path = os.path.join(base_dir, "students.csv")
    if os.path.exists(students_path):
        with open(students_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                student, created = Student.objects.update_or_create(
                    id=row["id"],
                    defaults={
                        "name": row["name"],
                        "email": row["email"],
                        "learningStyle": row.get("learningStyle", "RETRIEVAL"),
                        "learningStyleBreakdown": {}
                    }
                )
                
                # === Enroll student in module(s) ===
                module_ids = row.get("enrolled_modules", "").split(",")  # CSV column can list module IDs
                for mid in module_ids:
                    if mid:
                        module = Module.objects.get(id=mid)
                        student.enrolled_modules.add(module)


    # === Load Quiz Questions ===
    quiz_path = os.path.join(base_dir, "weeklyquizzes.csv")
    if os.path.exists(quiz_path):
        # Step 1: Group questions by module_id + topic_id
        grouped_quizzes = defaultdict(list)
        with open(quiz_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                key = (row["module_id"], row["topic_id"], row.get("quiz_type", "weekly"))
                question_dict = {
                    "question": row["question"],
                    "options": {
                        "A": row["option_A"],
                        "B": row["option_B"],
                        "C": row["option_C"],
                        "D": row["option_D"],
                    },
                    "answer": row["answer"],
                    "bloom_level": row["bloom_level"]
                }
                grouped_quizzes[key].append(question_dict)

        # Step 2: Create one quiz per topic per student in that module
        for (module_id, topic_id, quiz_type), questions in grouped_quizzes.items():
            module = Module.objects.get(id=module_id)
            topic = Topic.objects.get(id=topic_id)

            # Get students enrolled in this module
            students = Student.objects.filter(enrolled_modules=module)

            for student in students:
                history = StudentQuizHistory.objects.create(
                    student=student,
                    module=module,
                    quiz_data=questions,
                    student_answers={},
                    score=None,
                    completed=False,
                    quiz_type=quiz_type
                )
                history.topics_covered.set([topic])


def unload_data(apps, schema_editor):
    StudentQuizHistory = apps.get_model("app", "StudentQuizHistory")
    Student = apps.get_model("app", "Student")
    Relationship = apps.get_model("app", "Relationship")
    Node = apps.get_model("app", "Node")
    Concept = apps.get_model("app", "Concept")
    Topic = apps.get_model("app", "Topic")
    Module = apps.get_model("app", "Module")

    # Delete dependent objects first
    StudentQuizHistory.objects.all().delete()
    Student.objects.all().delete()
    Relationship.objects.all().delete()
    Concept.objects.all().delete()
    Topic.objects.all().delete()
    Node.objects.all().delete()

class Migration(migrations.Migration):
    
    dependencies = [
        ("app", "0001_initial"), 
    ]


    operations = [
        migrations.RunPython(load_data, reverse_code=unload_data),
    ]



