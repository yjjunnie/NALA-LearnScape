# Generated by Django 5.2.6 on 2025-09-28 14:31
from django.db import migrations
import csv
import os

def load_data(apps, schema_editor):
    # Get models from Django app
    Node = apps.get_model("app", "Node")
    Topic = apps.get_model("app", "Topic")
    Concept = apps.get_model("app", "Concept")
    Relationship = apps.get_model("app", "Relationship")
    Module = apps.get_model("app", "Module")

    base_dir = os.path.dirname(__file__)

    # === Load Modules ===
    modules_path = os.path.join(base_dir, "modules.csv")
    if os.path.exists(modules_path):
        with open(modules_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                # Create or update Module entries
                Module.objects.update_or_create(
                    id=row["module_id"],
                    defaults={
                        "name": row["module_name"],
                        "index": row.get("module_index", "")
                    }
                )

    # === Load Nodes (generic) ===
    # === Load Nodes (robust two-pass) ===
    nodes_path = os.path.join(base_dir, "nodes.csv")
    if os.path.exists(nodes_path):
        with open(nodes_path, newline="", encoding="utf-8") as f:
            reader = list(csv.DictReader(f))  # read all rows first

        # --- Pass 1: Create all Topics ---
        for row in reader:
            node_type = row["node_type"].lower()
            if node_type == "topic":
                node_id = row["node_id"]
                name = row["node_name"]
                summary = row["node_description"]
                module_id = row["node_module_id"]
                week_no = row.get("week_no")
                week_no = week_no.strip() if week_no and week_no.strip() else None
                module = Module.objects.get(id=module_id) if module_id else None

                obj, created = Topic.objects.update_or_create(
                    id=node_id,
                    defaults={"name": name, "summary": summary, "module": module, "week_no": week_no}
                )
                print(f"Saved Topic {obj.id} with week_no={obj.week_no}")

        # --- Pass 2: Create all Concepts ---
        for row in reader:
            node_type = row["node_type"].lower()
            if node_type == "concept":
                node_id = row["node_id"]
                name = row["node_name"]
                summary = row["node_description"]
                module_id = row["node_module_id"]
                parent_id = row.get("parent_node_id")
                week_no = row.get("week_no")
                week_no = week_no.strip() if week_no and week_no.strip() else None
                module = Module.objects.get(id=module_id) if module_id else None

                parent_topic = Topic.objects.get(id=parent_id) if parent_id else None

                obj, created = Concept.objects.update_or_create(
                    id=node_id,
                    defaults={
                        "name": name,
                        "summary": summary,
                        "related_topic": parent_topic,
                        "module": module,
                        "week_no": week_no
                    }
                )
                print(f"Saved Concept {obj.id} with week_no={obj.week_no}")

        # --- Pass 3: Create all other Nodes ---
        for row in reader:
            node_type = row["node_type"].lower()
            if node_type not in ("topic", "concept"):
                node_id = row["node_id"]
                name = row["node_name"]
                summary = row["node_description"]
                module_id = row["node_module_id"]
                week_no = row.get("week_no")
                week_no = week_no.strip() if week_no and week_no.strip() else None
                module = Module.objects.get(id=module_id) if module_id else None

                obj, created = Node.objects.update_or_create(
                    id=node_id,
                    defaults={"name": name, "summary": summary, "module": module, "week_no": week_no}
                )
                print(f"Saved Node {obj.id} with week_no={obj.week_no}")

    # === Load Relationships ===
    rels_path = os.path.join(base_dir, "relationships.csv")
    if os.path.exists(rels_path):
        with open(rels_path, newline="", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                rel_id = row["relationship_id"]
                first_node = Node.objects.get(id=row["node_id_1"])
                second_node = Node.objects.get(id=row["node_id_2"])
                rs_type = row["relationship_type"]

                Relationship.objects.update_or_create(
                    id=rel_id,
                    defaults={"first_node": first_node, "second_node": second_node, "rs_type": rs_type}
                )

def unload_data(apps, schema_editor):
    Node = apps.get_model("app", "Node")
    Relationship = apps.get_model("app", "Relationship")
    Relationship.objects.all().delete()
    Node.objects.all().delete()

class Migration(migrations.Migration):

    dependencies = [
        ("app", "0001_initial"),  # Adjust if needed
    ]

    operations = [
        migrations.RunPython(load_data, reverse_code=unload_data),
    ]
